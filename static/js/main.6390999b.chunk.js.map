{"version":3,"sources":["components/CareerItemList.js","App.js","serviceWorker.js","index.js"],"names":["DoctorCareer","nextProps","nextState","this","props","careers","_this$props","onRemove","careerList","map","_ref","id","react_default","a","createElement","className","key","htmlFor","type","onClick","e","Component","App","state","handleAppend","_this","setState","concat","console","log","handleRemove","filter","style","width","scope","CareerItemList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAwCeA,uMApCWC,EAAWC,GAC7B,OAAOC,KAAKC,MAAMC,UAAYJ,EAAUI,yCAGnC,IAAAC,EACyBH,KAAKC,MAA3BC,EADHC,EACGD,QAASE,EADZD,EACYC,SACXC,EAAaH,EAAQI,IAAI,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,GAAF,OAC3BC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACVJ,GAAIA,EACJK,IAAKL,GAENC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,SAAOG,QAAQ,WAAf,iBACRL,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOP,GAAG,UAAUI,UAAS,sBAE7CH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,SAAOG,QAAQ,QAAf,iBACRL,EAAAC,EAAAC,cAAA,YAAUH,GAAG,OAAOI,UAAU,aAGlCH,EAAAC,EAAAC,cAAA,OAAKC,UAAS,uBAA0BI,QAAS,SAACC,GAC9Cb,EAASI,KADb,gCAQR,OACIC,EAAAC,EAAAC,cAAA,WACKN,UA/BUa,cC4DZC,oNA1DXX,GAAK,IACLY,MAAQ,CACJlB,QAAS,MAGbmB,aAAe,SAACb,GAAO,IACXN,EAAYoB,EAAKF,MAAjBlB,QACRoB,EAAKC,SAAS,CACVrB,QAASA,EAAQsB,OAAO,CACpBhB,GAAIc,EAAKd,SAGjBiB,QAAQC,IAAIJ,EAAKd,OAGrBmB,aAAe,SAACnB,GAAO,IACXN,EAAYoB,EAAKF,MAAjBlB,QACRoB,EAAKC,SAAS,CACVrB,QAASA,EAAQ0B,OAAO,SAAA1B,GAAO,OAAIA,EAAQM,KAAOA,+EAIjD,IACGN,EAAYF,KAAKoB,MAAjBlB,QAEJmB,EAEArB,KAFAqB,aACAM,EACA3B,KADA2B,aAGJ,OACIlB,EAAAC,EAAAC,cAAA,WAASkB,MAAO,CAAEC,MAAM,WACpBrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAS,iCACVH,EAAAC,EAAAC,cAAA,SAAOC,UAAS,iBACZH,EAAAC,EAAAC,cAAA,WAASC,UAAU,eAAnB,uDACAH,EAAAC,EAAAC,cAAA,gBACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAEnBH,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIoB,MAAM,OAAV,gBACAtB,EAAAC,EAAAC,cAAA,MAAIH,GAAG,cACHC,EAAAC,EAAAC,cAAA,UAAQI,KAAK,SAASH,UAAS,2BAA8BI,QAASK,GAAtE,6BACAZ,EAAAC,EAAAC,cAAA,OAAKH,GAAG,cACJC,EAAAC,EAAAC,cAACqB,EAAD,CAAgB9B,QAASA,EAASE,SAAUuB,mBA9ClET,cCQEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6390999b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './CareerItem.css';\r\n\r\nclass DoctorCareer extends Component {\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return this.props.careers !== nextProps.careers;\r\n    }\r\n\r\n    render() {\r\n        const { careers, onRemove } = this.props;\r\n        const careerList = careers.map(({id}) =>\r\n            <div className=\"career\"\r\n                 id={id}\r\n                 key={id}\r\n            >\r\n                <div className=\"subject\">\r\n                    <strong><label htmlFor=\"subject\">제목</label></strong>\r\n                    <input type=\"text\" id=\"subject\" className={`inp_comm inp_txt`} />\r\n                </div>\r\n                <div className=\"cont\">\r\n                    <strong><label htmlFor=\"cont\">내용</label></strong>\r\n                    <textarea id=\"cont\" className=\"tf_area\"/>\r\n                </div>\r\n\r\n                <div className={`btn_type3 btn_delete`} onClick={(e) => {\r\n                    onRemove(id)}\r\n                }>\r\n                    항목 삭제\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                {careerList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DoctorCareer;","import React, { Component } from 'react';\nimport CareerItemList from './components/CareerItemList';\nimport './App.css';\n\nclass App extends Component {\n    id = 0;\n    state = {\n        careers: []\n    }\n\n    handleAppend = (id) => {\n        const { careers } = this.state;\n        this.setState({\n            careers: careers.concat({\n                id: this.id++\n            })\n        });\n        console.log(this.id);\n    }\n\n    handleRemove = (id) => {\n        const { careers } = this.state;\n        this.setState({\n            careers: careers.filter(careers => careers.id !== id)\n        });\n    }\n\n    render() {\n        const { careers } = this.state;\n        const {\n            handleAppend,\n            handleRemove\n        } = this;\n\n        return (\n            <section style={{ width:\"1054px\" }}>\n                <div className=\"pro_doctor_info\">\n                    <div className={`board_write_type2 detail_info`}>\n                        <table className={`tbl tbl_write`}>\n                            <caption className=\"screen_hide\">글 쓰기 입력 테이블</caption>\n                            <colgroup>\n                                <col className=\"col1\" />\n                                <col className=\"col2\" />\n                            </colgroup>\n                            <tbody>\n                            <tr>\n                                <th scope=\"row\">경력</th>\n                                <td id=\"careerList\">\n                                    <button type=\"button\" className={`btn_type4 btn_career_add`} onClick={handleAppend}>경력 추가</button>\n                                    <div id=\"careerWrap\">\n                                        <CareerItemList careers={careers} onRemove={handleRemove}/>\n                                    </div>\n                                </td>\n                            </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </section>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}